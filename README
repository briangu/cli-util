cli-util
----------------------------------------------------------------------------------
CLI Util is a small extension of apache common's command line interface (commons-cli) library.

Extensions to commons-cli:
* Sub-commands
* Typesafe Arguments
* Declarative sub-command, option and argument definitions

Example:
src/test/java/jpbetz/cli/BullhornApplication.java 
src/test/java/jpbetz/cli/Yell.java 

Basic Setup:
----------------------------------------------------------------------------------
Open your .bashrc, .profile, or whatever you use and add a CLIUTIL_HOME environment variable 
pointing to your cli-util working directory. Also, the cli bin to the PATH. 
Lastly, Make sure the JAVA_HOME environment variable is pointing to a JDK.

For bash style shells: 

export CLIUTIL_HOME=/Users/<username>/projects/cli-util
export PATH=$PATH:$CLIUTIL_HOME/sample-bin

Build stack:

$ cd $CLIUTIL_HOME
$ mvn package

Run the cli:

$ bullhorn yell


Hints for setting up classpaths:
----------------------------------------------------------------------------------

Each command line script (e.g. sample-bin/bullhorn) requires a classpath be setup.
Setting up a classpath correctly is depends a lot on the particulars of the
project it is added to.  Some hints:

* Use an project home environment variable.  Traditionally this is a <project_name>_HOME variable.
* Make all locations in the classpath relative to the project home environment variable where possible.
* Autogenerate the classpath with your build tool.
* Pass arguments through to java app with "$@" (include the quotes)
* Provide a <project_name>_OPT environment variable that is passed in to the jvmargs that can be optionally set.

------
Maven:
------
Simplest approach is to using the jar-with-dependencies assembly build plugin (see pom.xml)
and then reference it in the shell script.

maven pom: see pom.xml

shell script:
java -cp $CLIUTIL_HOME/target/cli-util-1.0-SNAPSHOT-jar-with-dependencies.jar $CLIUTIL_OPTS jpbetz.cli.BullhornApplication "$@"

-------
Gradle:
-------
Add a custom task to generate the classpath.  This can either be used to generate the shell script, or
be written to a plain file which is used in the shell script.

gradle task:
task cliClasspath << {
  new File("$projectDir/sample-bin/classpath").withWriter { out ->
     
    runtimeClasspath.each {File file ->
        out.print file.absolutePath + ':'
    }
  }
}
compileJava.dependsOn cliClasspath

shell script:
java -cp `cat $CLIUTIL_HOME/sample-bin/classpath` $CLIUTIL_OPTS jpbetz.cli.BullhornApplication "$@"

----
Ant:
----

??? Suggestions welcome.